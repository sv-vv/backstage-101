apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: first-backend-plugin
  description: A demo API that uses an external data source to store it in the database and expose further in the UI
  # Example for optional annotations
  annotations:
    github.com/project-slug: cristian-hurdubai-sv/plugin-first-backend
spec:
  type: openapi
  lifecycle: experimental
  owner: cristian.hurdubai@softvision.com
  definition: |
    openapi: "3.0.0"
    info:
      version: 0.1.0
      title: First backend API
      license:
        name: BSD
    servers:
      - url: http://localhost:7007/api/first/
    paths:
      /get-random-users:
        put:
          description: Get a list of random users from randomuser.me
          responses:
            '200':
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/RandomUsers'
      /users:
        get:
          description: Get a list of users from database
          responses:
            '200':
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/RandomUsers'

      /users/{id}:
        get:
          description: Get one user from database
          parameters:
            - name: id
              in: path
              required: true
              style: simple
              explode: false
              schema:
                type: string
                example: 0d473b1e-5d74-4676-8d7e-be6156dd7e9d
          responses:
            '200':
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/RandomUser'
            '404':
              description: Not Found
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorModel'
        delete:
          description: Delete one user from database
          parameters:
            - name: id
              in: path
              required: true
              style: simple
              explode: false
              schema:
                type: string
                example: 0d473b1e-5d74-4676-8d7e-be6156dd7e9d
          responses:
            '204':
              descrition: delete perfomed successfully
            '404':
              description: Not Found
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorModel'
    components:
      schemas:
        RandomUsers:
          type: array
          items:
            $ref: "#/components/schemas/RandomUser"
        RandomUser:
          type: object
          properties:
            id:
              type: string
              description: RandomUser ID
              example: "0d473b1e-5d74-4676-8d7e-be6156dd7e9d"
            first_name:
              type: string
              description: User first name
              example: Alexander
            last_name:
              type: string
              description: User last name
              example: TheGreat
            email:
              type: string
        ErrorModel:
          type: object
          properties:
            status:
              type: string
              example: "ok | nok"
            message:
              type: string
      
